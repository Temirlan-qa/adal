import telebot
import config
from telebot import types
from string import Template
bot = telebot.TeleBot(config.token)
user_dict = {}

class User:
	def __init__(self, SET):
		self.SET = SET
		keys = ['fullname', 'phone', 'adress',]
		for key in keys:
			self.key = None

@bot.message_handler(commands=['help', 'start'])
def send_welcome(message):
	markup = types.ReplyKeyboardMarkup(resize_keyboard=True, row_width=2)
	itembtn1 = types.KeyboardButton('/–ó–∞–∫–∞–∑')
	itembtn2 = types.KeyboardButton('/FAQ')
	itembtn3 = types.KeyboardButton('/Menu')
	markup.add(itembtn1, itembtn2, itembtn3)
	bot.send_message(message.chat.id, "–°”ô–ª–µ–º–µ—Ç—Å—ñ–∑–±–µ "+str(message.from_user.first_name)+',Adal chicken-–≥–µ “õ–æ—à –∫–µ–ª–¥—ñ“£—ñ–∑',reply_markup=markup)
@bot.message_handler(commands=['Menu'])
def send_about(message):
		bot.send_photo(message.chat.id, open("–°–µ—Ç.png",'rb'), timeout=1000)
		bot.send_photo(message.chat.id, open("menu.png",'rb'), timeout=1000)
		bot.send_message(message.chat.id,'–ó–∞–∫–∞–∑ –∂–∞—Å–∞—É —É—à–∏–Ω "–ó–∞–∫–∞–∑" –¥–µ–≥–µ–Ω –∂–µ—Ä–¥–∏ –±–∞—Å—ã–Ω—ã–∑')
@bot.message_handler(commands=['FAQ'])
def send_about(message):
		markup = types.InlineKeyboardMarkup()
		btn_my_site= types.InlineKeyboardButton(text='–ù–∞—à–∞ –∏–Ω—Å—Ç–∞', url='https://www.instagram.com/pasha.taraz/')
		markup.add(btn_my_site)
		bot.send_message(message.chat.id, "–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –∏ –ø–µ—Ä–µ–π–¥–∏ –Ω–∞ –Ω–∞—à—É –∏–Ω—Å—Ç—É.", reply_markup = markup)
@bot.message_handler(commands=["–ó–∞–∫–∞–∑"])
def user_reg(message):
		markup = types.ReplyKeyboardMarkup(one_time_keyboard=True, resize_keyboard=True)
		#set
		itembtn1 = types.KeyboardButton('MAXüçó')
		itembtn2 = types.KeyboardButton('Kidsüçó')
		itembtn3 = types.KeyboardButton('Starüçó')
		itembtn4 = types.KeyboardButton('Mixüçó')
		itembtn5 = types.KeyboardButton('Duelüçó')
		#–ö—É—Ä–æ—á–∫–∞
		itembtn6 = types.KeyboardButton('–ö—É—Ä–æ—á–∫–∞ 7(1190)')
		itembtn7 = types.KeyboardButton('–ö—É—Ä–æ—á–∫–∞ 14(2190)')
		#–ö—Ä—ã–ª—ã—à–∫–∏
		itembtn8 = types.KeyboardButton('–ö—Ä—ã–ª—ã—à–∫–∏ 8(1090)')
		itembtn9 = types.KeyboardButton('–ö—Ä—ã–ª—ã—à–∫–∏ 16(1990)')
		itembtn10 = types.KeyboardButton('–ö—Ä—ã–ª—ã—à–∫–∏ 32(3790)')
		#–°—Ç—Ä–∏–ø—Å—ã
		itembtn11 = types.KeyboardButton('–°—Ç—Ä–∏–ø—Å—ã 7(690)')
		itembtn12 = types.KeyboardButton('–°—Ç—Ä–∏–ø—Å—ã 15(1390)')
		#–Ω–æ–∂–∫–∏
		itembtn13 = types.KeyboardButton('–Ω–æ–∂–∫–∏ 4(1190)')
		itembtn14 = types.KeyboardButton('–Ω–æ–∂–∫–∏ 8(2390)')
		itembtn15 = types.KeyboardButton('–Ω–æ–∂–∫–∏ 16(4590)')
		markup.add(itembtn1, itembtn2, itembtn3, itembtn4, itembtn5, itembtn6, itembtn7, itembtn8, itembtn9, itembtn10, itembtn11, itembtn12, itembtn13, itembtn14, itembtn15)
		msg = bot.send_message(message.chat.id, '–≤—ã–±–µ—Ä–∏—Ç–µ:', reply_markup=markup)
		bot.register_next_step_handler(msg, process_city_step)
def process_city_step(message):
	chat_id = message.chat.id
	user_dict[chat_id] = User(message.text)

	# —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
	markup = types.ReplyKeyboardRemove(selective=False)

	msg = bot.send_message(chat_id, '–ù–∞–ø–∏—à–∏—Ç–µ –∞–¥—Ä–µ—Å –¥–æ—Å—Ç–∞–≤–∫–∏:', reply_markup=markup)
	bot.register_next_step_handler(msg, adress)
def adress(message):

	chat_id = message.chat.id
	user = user_dict[chat_id]
	user.adress = message.text

	msg = bot.send_message(chat_id, '–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:')
	bot.register_next_step_handler(msg, process_phone_step)
def process_phone_step(message):
	try:
		int(message.text)
		chat_id = message.chat.id
		user = user_dict[chat_id]
		user.phone = message.text

		msg = bot.send_message(chat_id, '–í–∞—à–µ –∏–º—è:')
		bot.register_next_step_handler(msg, process_carDate_step)
	except Exception as e:
		msg = bot.reply_to(message, '–í—ã –≤–≤–µ–ª–∏ —á—Ç–æ —Ç–æ –¥—Ä—É–≥–æ–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞ –≤–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞.')
		bot.register_next_step_handler(msg, process_phone_step)
def process_carDate_step(message):

	chat_id = message.chat.id
	user = user_dict[chat_id]
	user.fullname = message.text

		# –≤–∞—à–∞ –∑–∞—è–≤–∫–∞ "–ò–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
	bot.send_message(chat_id, getRegData(user, '–°–ø–∞—Å–∏–±–æ, –í–∞—à –∑–∞–∫–∞–∑ –ø—Ä–∏–Ω—è—Ç! –û–∂–∏–¥–∞–π—Ç–µ –∑–≤–æ–Ω–∫–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞! –ê–¥–∞–ª –ß–∏–∫–µ–Ω!.\n –í–∞—à–∞ –∑–∞—è–≤–∫–∞:', message.from_user.first_name ), parse_mode="Markdown")
		# –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≤ –≥—Ä—É–ø–ø—É
	bot.send_message(config.chat_id, getRegData(user, '–ó–∞—è–≤–∫–∞ –æ—Ç –±–æ—Ç–∞', bot.get_me().username), parse_mode="Markdown")
def getRegData(user, title, name):
	t = Template('$title *$name* \n –∑–∞–∫–∞–∑: *$userSET* \n –∏–º—è: *$fullname* \n –¢–µ–ª–µ—Ñ–æ–Ω: *$phone* \n –ê–¥—Ä–µ—Å: *$adress*')

	return t.substitute({
		'title': title,
		'name': name,
		'userSET': user.SET,
		'fullname': user.fullname,
		'phone': user.phone,
		'adress': user.adress,
	})

@bot.message_handler(content_types=["text"])
def send_help(message):
    bot.send_message(message.chat.id, '–ü–æ–º–æ—â—å - /help')

# –ø—Ä–æ–∏–∑–≤–æ–ª—å–Ω–æ–µ —Ñ–æ—Ç–æ
@bot.message_handler(content_types=["photo"])
def send_help_text(message):
    bot.send_message(message.chat.id, '–ù–∞–ø–∏—à–∏—Ç–µ —Ç–µ–∫—Å—Ç')

# Enable saving next step handlers to file "./.handlers-saves/step.save".
# Delay=2 means that after any change in next step handlers (e.g. calling register_next_step_handler())
# saving will hapen after delay 2 seconds.
bot.enable_save_next_step_handlers(delay=2)

# Load next_step_handlers from save file (default "./.handlers-saves/step.save")
# WARNING It will work only if enable_save_next_step_handlers was called!
bot.load_next_step_handlers()




bot.polling(none_stop=True)